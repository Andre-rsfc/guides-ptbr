---
layout: default
title: Tutorial de fundamentos web
permalink: sinatra
---

*Created by Tim McEwan, [@tjmcewan](https://twitter.com/tjmcewan)*

##Objetivo

Você já imaginou como a informação sai e entra do seu nagevador web? Nesse tutorial nos vamos ver como tudo isso funciona explorando o HTTP.

Nós vamos usar o [**sinatra**](http://www.sinatrarb.com/) como ferramenta para demostrar alguns principios básicos. O sinatra é um pequeno framework para criar aplicações web em Ruby como o mínimo de esforço. VOcê pode encontrar uma lista de [coisas construídas com sinatra aqui](http://www.sinatrarb.com/wild.html).

O sinatra é diferente do Rails. Os dois são frameworks que nos ajudam a escrever aplicativos web, mas o Sinatra contém menos recursos e menos mágica.

## Introdução

HTTP é usado para enviar informação através de uma aplicação (como o seu app do Rails Girls) e um browser.
O básico de uma cominicação com HTTP é o par requisição/resposta. Requisições são enviadas do browser para o servidor (ex. o seu app) e a resposta é enviada de volta para o servidor para o seu browser para um usuário ver.

Para fazer uma requisição no browser, você precisa usar uma URL. Uma URL contém várias informações sobre qual informação você está requisitando então o servidor poderá te enviar a resposta correta.

Uma URL contém:

* O protocolo com o qual você se comunicará
* O domínio que possui a informação que você deseja
* O caminho para o recurso daquele servidor
* Opcionalmente podem haver parâmetros no final da url, os pares chave/valor, que contém informação extra sobre a requisição
* Os // no começo da URL especificam que essa requisição quer fazer contato com o servidor.
* O ? no final de uma URL sinaliza o final do caminho do arquivo, e o início de parâmetros opcionais.

<img src="../images/url-breakdown.png" alt="Quebra de uma URL" />

URLs revelam o recurso que você quer, mas a ação que precisa ser realizada naquele recurso precisa ser especificada usando verbos HTTP.

O verbos HTTP mais comuns são

* GET: busca um recurso já existente.
* POST: cria um novo recurso. (Usalmente inclui dados que são necessários para criar o novo recurso).
* PUT: atualiza um recurso existe.
* DELETE: deleta um recurso existente.

Você deve ter usado todos esses verbos no seu app do Rails Girls quando você fez ele mostrar, criar, editar e deletar posts ou notas.

Um request para um servidor precisa incluir tanto a URL e o verbo HTTP.

Nos exercícios seguintes você irá construir uma pequena aplicação de um café que usa uma combinação de pastas de recursos e verbos HTTP para demostrar como os browser se comunicam com a sua aplicação.

O seu app vai ficar parecido com esse no browser:

<img src="../images/coffee-app.png" alt="Sinatra Coffee App" />

## *0. Instalar o Sinatra - "Olá Mundo"

Vamos começar rodando o Sinatra.

No seu terminal, instale a gem:

{% highlight sh %}
gem install sinatra
gem install sinatra-contrib
{% endhighlight %}

## *1.*"Olá Mundo"

Crie um arquivo chamado `app.rb` e cole o seguinte código no seu editor de texto:

{% highlight ruby %}
require "sinatra"
require "sinatra/reloader"

get "/" do
"Olá mundo!"
end
{% endhighlight %}

E no seu terminal, cole o código abaixo:
{% highlight sh %}
ruby app.rb
{% endhighlight %}

Veja o seu site em: [http://localhost:4567](http://localhost:4567)

A informação aparecendo no seu browser é a resposta de uma requisição GET.

Quando você digita http://localhost:4567 você está enviando uma requisição GET para o seu servidor Sinatra.

O que você vê no browser é a resposta do seu servidor Sinatra.

Quando você escreve "/", você só está especificando a url raiz, mas você pode criar qualquer caminho que você queira.

No mesmo arquivo, tente criar mais páginas para visitar, usando a mesma sintaxe do bloco acima. Você pode adicionar quantas páginas quiser, e fazê-las mostrar o que você quiser.

e.g.
{% highlight sh %}
get "/nome-da-pagina" do
 "Esse é o texto da página"
 end
{% endhighlight %}

Se você quiser você pode apertar <kbd>Ctrl</kbd>+<kbd>C</kbd> no seu terminal para parar o seu app. (Exatamente como o seu app Rails!), contudo você não precisa reiniciar o seu servidor para ver as mudanças.

Se você ficar travada, garanta que o seu app.rb parece [com esse aqui](http://tjmcewan.github.io/coffeecalc/snippets/install_sinatra.rb.txt).

## *3.* Formulário HTML - Parâmetros

Para começar a listagem de cafés no seu app, nos vamos precisar de um formulário HTML para enviar qual café nos queremos e quando ele custa.

Isso significa enviar uma requisição para o servidor Sinatra, incluindo alguma informação.

Para enviar informação para o servidor, nós podemos usar um formulário.

Substitua o seu `get "/"` do exemplo anterior por:

{% highlight ruby %}
get "/" do
"
<html>
<body>
<form action='/' method='get'>
Café: <input name='cafe'>
Valor: <input name='valor'>
<button type='submit'>Adicionar café</button>
</form>
<!-- coffees go here -->
</body>
</html>
"
end


{% endhighlight %}

Para simplificação, esse formulário envia a informação para a mesma URL ("/").

Atualize o seu browser e veja o formulário que você acabou de criar.

Agora vamos ver o que o browser enviou ao servidor quando você submeteu o formulário. Coloque um pouco de texto no formulário e clique no botão 'Adicionar café'. Verifique os logs do Sinatra no seu terminal e você deve ver algo assim:

{% highlight HTTP %}
GET /?cafe=flat+white&valor=3.50 HTTP/1.1
{% endhighlight %}

**Coach:** Falar sobre de onde ve os nomes dos parâmetros e o que faz o ponto de interrogação.

Se não deu muito certo, certifique-se de que o seu código parece com [esse código](http://tjmcewan.github.io/coffeecalc/snippets/html_form.rb.txt).

## *4.*Inspetor Web - Cabeçalho de requisição

No seu browser, abra o console web. (Para a maioria dos browser, o console pode ser acessado assim: *clique com o botão direito em qualquer lugar da página e selecione "Inpecionar Elemento"*.) Eu recomendo que você use o Chrome para isso; se você estiver usando o Chrome, olhe a aba 'Network'.

Atualize o seu browser, então clique na linha 'localhost' no impetor web, e então na aba cabeçalhos, clique em 'ver código fonte'. Você deve ver algo similar a isso:

{% highlight HTTP %}
GET / HTTP/1.1
Host: localhost:4567
Connection: keep-alive
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.70 Safari/537.36
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-US,en;q=0.8
{% endhighlight %}

**Coach:** Explicar o que são os cabeçalhos (headers) HTTP e o que eles significam.

A parte mais importante está na primeira linha, que separa o verbo HTTP da URL que foi chamada.

**Nota:** Se o Sinatra disser "backup from WEBrick", o servidor embutido do Ruby, então pode ser que você veja multiplas requisições GET a cada atualização sua. Apenas uma requisição está sendo processada, você pode ignorar a outra tranquilamente.

## *5.* Variavel global

So our form is sending the coffee information to our app, but we're not doing anything with it yet. We should save the coffee information after it is sent to the server.

For simplicity, let's just store the coffee details in a variable. So that they'll be available between requests, we'll need to use a [**global**](http://en.wikipedia.org/wiki/Global_variable) variable. This is a drastically simplified version of what Rails calls the Model layer.

Add this to your `app.rb` somewhere (convention says it should be near the top, under the `require` lines):
{% highlight ruby %}
$coffees = []
{% endhighlight %}

This creates an empty array when your app first starts up.

**Hint:** This global variable won't be around for very long - it will be reset to the empty array each time the server restarts.  Because we're using Sinatra's reloader, this will be every time you save your `app.rb` file.  Don't worry though, it will suit our purposes nicely.

## *6.* Receiving information - Storing Coffees

Now you'll need to get the information into that `$coffees` array when the request is received. When you fill in your form and click the submit button, remember that your information is put on the end of the URL, after the ?, to be sent back to the server.

 Sinatra grabs that information from the end of the URL and makes it available as a Hash called `params`. For example:

 {% highlight ruby %}
 params = {coffee = 'flat white', value ='2'}
{% endhighlight %}

You will need to write some code to take them from the params hash and add them to your  $coffees variable.

Before you start, first replace `<!-- coffees go here -->` in your form with:

{% highlight ruby %}
#{ $coffees.inspect }
{% endhighlight %}

This will display the `$coffees` variable in the HTML in your browser so we can tell if coffees are being added to your $coffees variable (i.e. that your code is working).

**Hint:**
Your global variable is an array, so if you get stuck, try [Ruby's Array documentation ](http://www.ruby-doc.org/core-2.1.0/Array.html#method-i-3C-3C) to find out how you can add information to an array.

If you're still stuck, [check here](http://tjmcewan.github.io/coffeecalc/snippets/store_coffees.rb.txt).

If you're storing your params correctly, you should be able to refresh the browser and see that a new hash gets added to the `$coffees` array each time.

## *6.* Tidy Up

That big chunk of HTML in our `get` code is making it a bit hard to see what our app does. Let's move it to its own method.

Cut the HTML form out of your `get` code and paste it into a method called `template` (keep all your code in the same file). Like so:

{% highlight ruby %}
def template
# put your HTML form string here
end
{% endhighlight %}

Now replace the form from your `get` code with a simple call to the template method, like this:

{% highlight ruby %}
get "/" do
$coffees << params
template
end
{% endhighlight %}

This will also make it easier to re-use the form, should we ever need to.

**Hint:** [Check here](http://tjmcewan.github.io/coffeecalc/snippets/template_method.rb.txt) if something went awry.

## *7.* Moving Beyond GET

As you saw in the store coffees section, if you refresh your browser, your app adds the information into the `$coffees` global variable repeatedly. This is because we're storing the params from the URL each time our `get` code is requested.

This is a good point to mention that `GET` requests should not do things that add information to our app - while it does work, like in this instance, it's too easy for unintended side-effects to occur. In this case it's better to use a `POST` request.

Remember `GET` requests are asking to fetch a resource, whereas POST requests are asking to create a resource.

So armed with that knowledge, let's change our form's method to `POST`:

* Locate the section in the form that specifies the method as `get` and change it to `post`.
* Now refresh your browser and submit a new coffee.

**Uh oh!** Welcome to Sinatra's lovely error page, if you haven't encountered it yet today. The message at the bottom should say this:

{% highlight ruby %}
Try this:
post '/' do
 "Hello World"
end
{% endhighlight %}

This is Sinatra's way of telling you that the route you requested doesn't exist. You may also know this as HTTP error number 404: *page not found*.


## *8.* Add Post

Let's *add* our `post` code into Sinatra (don't remove the get one!):

* Grab the "Hello world" `post` code from Sinatra's 404 page and put it after our `get`. (**Hint:** Do not copy from above; this page uses smart quotes & will break your code.)
* Replace the "Hello world" with a call to our `template` method. (**Hint:** Don't remove the call to `template` from our `get` code.)
* Now *move* the line that stores the coffee params over from the `get` code (ensure this goes *above* the call to `template`).

As usual, you can check your progress [over here](http://tjmcewan.github.io/coffeecalc/snippets/get_vs_post.rb.txt).

Now if you refresh the page after submitting a coffee, you should see a warning from your browser that it needs to resubmit the form in order to load the page:

<img src="../images/chrome-confirm-resubmission.png" alt="Chrome's confirm resubmission dialog" />

You might have seen this sometimes when you've submitted forms online. Having this warning prompts us to think about the consequences of our refresh and we will probably avoid inadvertently adding the same coffee multiple times.

Remember GET requests are asking to fetch a resource, whereas POST requests are asking to create a resource. If you refresh a page on a GET request, you are simply asking repeatedly to see the same page, which usually won't be a problem.

However, if you refresh a page on a POST request, this means you are resending the POST request, and could be creating a new resource each time you refresh. That's why the browser gives you a warning before allowing you to do it.


## *9.* Add a Redirect

In order to get around this form-resubmission problem, lets tell the browser to load a different page as soon as it receives the response to our `POST`.  We do this using a special HTTP response known as a "redirect".

Instead of the call to our `template` method, we can redirect the browser to another location.

In Sinatra, it looks like this:

{% highlight ruby %}
redirect "/"
{% endhighlight %}

Try first, then [check it here](http://tjmcewan.github.io/coffeecalc/snippets/post_redirect.rb.txt).

This sends back a special redirect response (HTTP 303) with a `location` header that specifies where the browser should go:

{% highlight HTML %}
HTTP/1.1 303 See Other
<…>
Location: http://localhost:4567/
{% endhighlight %}

To see this in action, have a look in Chrome's Web Inspector (Network tab) and send your app a coffee:

<img src="../images/chrome-post-redirect.png" alt="Chrome's network tab showing a post/redirect/get" />

The first line shows the browser submitting the form via the `POST` request method. The response it receives is an HTTP 303, containing the `Location` header. It then issues a `GET` request for that location (which corresponds to our root URL, "/") and renders the response it gets from there - which is our HTML template.

Now you can refresh all you want and all you're doing is requesting using `GET`, not `POST`. Your browser doesn't have to submit the form any more to display that page.

This is the end of the tutorial - you've done an excellent job!

Thanks for playing!

## Additional Guides
If you were fast and would like to continue on, you can try:

* [rendering our coffee list in proper HTML](/sinatra-html)
**LUCY-TODO**
